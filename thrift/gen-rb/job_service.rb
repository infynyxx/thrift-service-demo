#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'base_service'
require 'job_types'

    module Job_service
      module JobService
        class Client < Base::BaseService::Client 
          include ::Thrift::Client

          def findById(id)
            send_findById(id)
            return recv_findById()
          end

          def send_findById(id)
            send_message('findById', FindById_args, :id => id)
          end

          def recv_findById()
            result = receive_message(FindById_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'findById failed: unknown result')
          end

          def processJob(job, options)
            send_processJob(job, options)
            return recv_processJob()
          end

          def send_processJob(job, options)
            send_message('processJob', ProcessJob_args, :job => job, :options => options)
          end

          def recv_processJob()
            result = receive_message(ProcessJob_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'processJob failed: unknown result')
          end

          def abort(id)
            send_abort(id)
            return recv_abort()
          end

          def send_abort(id)
            send_message('abort', Abort_args, :id => id)
          end

          def recv_abort()
            result = receive_message(Abort_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'abort failed: unknown result')
          end

        end

        class Processor < Base::BaseService::Processor 
          include ::Thrift::Processor

          def process_findById(seqid, iprot, oprot)
            args = read_args(iprot, FindById_args)
            result = FindById_result.new()
            result.success = @handler.findById(args.id)
            write_result(result, oprot, 'findById', seqid)
          end

          def process_processJob(seqid, iprot, oprot)
            args = read_args(iprot, ProcessJob_args)
            result = ProcessJob_result.new()
            result.success = @handler.processJob(args.job, args.options)
            write_result(result, oprot, 'processJob', seqid)
          end

          def process_abort(seqid, iprot, oprot)
            args = read_args(iprot, Abort_args)
            result = Abort_result.new()
            result.success = @handler.abort(args.id)
            write_result(result, oprot, 'abort', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class FindById_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ID = 1

          FIELDS = {
            ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class FindById_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Job_service::Job}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ProcessJob_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          JOB = 1
          OPTIONS = 2

          FIELDS = {
            JOB => {:type => ::Thrift::Types::STRING, :name => 'job'},
            OPTIONS => {:type => ::Thrift::Types::MAP, :name => 'options', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class ProcessJob_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Job_service::Job}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Abort_args
          include ::Thrift::Struct, ::Thrift::Struct_Union
          ID = 1

          FIELDS = {
            ID => {:type => ::Thrift::Types::STRING, :name => 'id'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

        class Abort_result
          include ::Thrift::Struct, ::Thrift::Struct_Union
          SUCCESS = 0

          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Job_service::Job}
          }

          def struct_fields; FIELDS; end

          def validate
          end

          ::Thrift::Struct.generate_accessors self
        end

      end

    end
